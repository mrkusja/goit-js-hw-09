{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAA6BC,GAC3BA,EAAMC,iBACN,MACEC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cACV,IAAIC,EAAeC,OAAOL,EAAMM,OAC5BC,EAAcF,OAAOJ,EAAKK,OAC1BE,EAAgBH,OAAOH,EAAOI,OAClCG,QAAQC,IACN,UAAUV,EAAMM,gBAAgBL,EAAKK,iBAAiBJ,EAAOI,SAG/D,IAAK,IAAIK,EAAW,EAAGA,GAAYH,EAAeG,GAAY,EAAG,CAC/D,MAAMC,EAAa,EAAEC,EAAUC,MAE7BC,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAS,EAGnEI,EAAW,EAAEL,EAAUC,MAE3BC,EAAAvB,GAASwB,OAAOG,QAAQ,sBAAoBN,QAAeC,MAAS,EAGtE,SAASM,EAAcC,GACrB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACF,EAAGR,SAAUQ,EAAGrB,QAEzBwB,EAAO,CAACH,EAAGR,SAAUQ,EAAGrB,OAAO,GAEhCqB,EAAGrB,OACNI,GAAgBG,EAChBE,QAAQC,IAAIN,EAAa,G,CAG7BgB,EAAc,CAAEP,SAAUF,EAAUX,MAAOI,IACxCwB,KAAKhB,GACLiB,MAAMX,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitFormHandler);\n\nfunction onSubmitFormHandler(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  let currentDalay = Number(delay.value);\n  let currentStep = Number(step.value);\n  let currentAmount = Number(amount.value);\n  console.log(\n    `Delay: ${delay.value}, Step: ${step.value}, Amount ${amount.value}`\n  );\n  // event.currentTarget.reset();\n  for (let position = 1; position <= currentAmount; position += 1) {\n    const logSuccess = ([position, time]) => {\n      // console.log(`✅ Fulfilled promise ${position} in ${time}ms`);\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${time}ms`);\n    };\n\n    const logError = ([position, time]) => {\n      // console.log(`❌ Rejected promise ${position} in ${time}ms`);\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${time}ms`);\n    };\n\n    function createPromise(el) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const shouldResolve = Math.random() > 0.3;\n          if (shouldResolve) {\n            resolve([el.position, el.delay]);\n          } else {\n            reject([el.position, el.delay]);\n          }\n        }, el.delay);\n        currentDalay += currentStep;\n        console.log(currentDalay);\n      });\n    }\n    createPromise({ position: position, delay: currentDalay })\n      .then(logSuccess)\n      .catch(logError);\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","currentDalay","Number","value","currentStep","currentAmount","console","log","position1","logSuccess","position","time","$parcel$interopDefault","Notify","success","logError","failure","createPromise","el","Promise","resolve","reject","setTimeout","Math","random","then","catch"],"version":3,"file":"03-promises.28418929.js.map"}